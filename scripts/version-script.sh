#!/bin/sh

# This script is run by Xcode during the build phase to generate information about
# the build in C header file format.  When run it produces a file which is included by main.m.
# Copy and paste this file into into Xcodes script window, or alternatively
# source this file from a small script in Xcode which does not need to be 
# changed much.

# for finding Fossil
PATH=$PATH:/usr/local/bin

OF=XXXX-Tempfile.h
echo  Fossil checked-in files checking script
build_uuid=$(uuidgen | tr -d '\012')

function printlines(){
	while read i
		do	
			i=`echo "$i" | sed 's/"/\\\\"/g'`
			printf '"%s\\n"\n' "$i"
		done
}

function marketing_version(){
# Older versions of agvtool within Xcode have a different format 
# for the -terse option, and don't support the -terse1 option at all.
# Use the lowest common denominator and process with an awk script.


agvtool mvers  | tail -1 | tr '"' '%' |\
     awk 'BEGIN { FS="%"} { printf("%s",$2)}' 
}


rm -f "${OF}"
# Removing this file does not seem to force Xcode to recompile main.m.
# Sometimes it does, sometimes it does not. The safest thing is to do 
# an xcodebuild clean first.

#  see if agvtool produces an error
agvtool mvers
if [ $? -ne 0 ]
then 
	echo 'agvtool failed - You probably have multiple projects'
	exit 1
fi




echo '// *** This file is automatically generated - do not edit. ***' >${OF}
echo '// *** Do not check this file into Fossil. ***' >>${OF}
echo 'char buildinfo[]=' >>${OF}

unchecked_files=`fossil changes | wc -l`  

printf '"Checkout identifying the source code\\n"\n' >> ${OF}
printf '" used in this build of %s:\\n"\n' "$PRODUCT_NAME">>${OF}
uuid=Unknown
if test -f ../manifest.uuid 
 then 
  uuid=`cat ../manifest.uuid`
 fi
printf '"%s\\n"\n'  "$uuid" >>${OF}
if [ $unchecked_files -ne 0 ]
	then
	printf '"Warning: unchecked files = %d\\n"\n' $unchecked_files >> ${OF}
	printf '"==== Checkout does not reflect build files ====\\n"\n' >>${OF}
	fi
printf '"\\n"\n' >>${OF}
printf '"Version: %s\\n"\n'  $(marketing_version) >> ${OF} 
printf '"\\n"\n' >>${OF}

printf '"Build machine hostname: %s\\n"\n' `hostname -f` >> ${OF}
printf '"Built by username: %s\\n"\n' `whoami` >> ${OF}
printf '"Build UUID: %s\\n"\n' "${build_uuid}" >> ${OF}
printf '"Build ID: %s\\n"\n' "${BUILDID}" >> ${OF}
builddate=`date`
printf '"Built on: %s\\n\\n"\n' "$builddate"  >> ${OF}
printf '"=== Version control status ===\\n"\n' >>${OF}
fossil status  | printlines >> ${OF}
if [ $unchecked_files -ne 0 ]	
then
printf '"Warning: %d unchecked files (this is bad)\\n"\n' $unchecked_files >>${OF}
printf '"         It means that the checkout does not reflect the state of the files used\\n"\n' >> ${OF}
printf '"         for this build.\\n"\n' >> ${OF}
fi		
printf '"\\n"\n' >>${OF}
printf '"Archs: %s\\n"\n' "${ARCHS}" >>${OF} 
printf '"Build Style: %s\\n"\n' "${BUILD_STYLE}" >>${OF}
printf '"Build Variants: %s\\n"\n' "${BUILD_VARIANTS}" >>${OF}
printf '"Garbage collection: %s\\n"\n' "${GCC_ENABLE_OBJC_GC}" >>${OF}
printf '"Debugging Symbols:%s\\n"\n' "${DEBUGGING_SYMBOLS}" >>${OF}
printf '"Debug Information Format: %s\\n"\n' "${DEBUG_INFORMATION_FORMAT}" >>${OF}
printf '"GCC Version: %s\\n"\n' "${GCC_VERSION}" >>${OF}
printf '"MacOSX Deployment Target: %s\\n"\n' "${MACOSX_DEPLOYMENT_TARGET}" >>${OF}
printf '"Product Name: %s\\n"\n' "${PRODUCT_NAME}" >>${OF}
printf '"SDK Root: %s\\n"\n' "${SDKROOT}" >>${OF}
printf '"SDK Name: %s\\n"\n' "${SDK_NAME}" >>${OF}
echo   '=== Xcode ===' | printlines >>${OF}
printf '"Xcode Version Actual: %s\\n"\n' "${XCODE_VERSION_ACTUAL}" >>${OF}
printf '"Xcode Version Major: %s\\n"\n' "${XCODE_VERSION_MAJOR}" >>${OF}
printf '"Xcode Version Minor: %s\\n"\n' "${XCODE_VERSION_MINOR}" >>${OF}
xcodebuild -version | printlines >> ${OF}
echo '=== OS X ===' | printlines >> ${OF}
printf '"Build Machine OSX Version Actual: %s\\n"\n' "${MAC_OS_X_VERSION_ACTUAL}" >>${OF}
printf '"Build Machine OSX Version Major: %s\\n"\n' "${MAC_OS_X_VERSION_MAJOR}" >>${OF}
printf '"Build Machine OSX Version Minor: %s\\n"\n' "${MAC_OS_X_VERSION_MINOR}" >>${OF}
printf '"Build Machine OSX Version: %s\\n"\n' "${PLATFORM_PRODUCT_BUILD_VERSION}" >> ${OF}
echo '=== build machine sw_vers ===' | printlines >> ${OF}
sw_vers | printlines >> ${OF}
echo '=== SQLite ===' | printlines >> ${OF}
echo \; >>${OF}
printf 'int unchecked_files = %d;\n' $unchecked_files >>${OF}
printf 'char source_code_fossil_uuid[]="%s";\n' $uuid >>${OF}
printf 'char build_uuid[]="%s";\n' "${build_uuid}" >> ${OF}
printf 'char marketing_version[]="%s";\n' "$(marketing_version)" >> ${OF}

if [ $unchecked_files -ne 0 ]
	then 
		echo ERROR files not checked into Fossil
		exit 0
	else
		exit 0
	fi
